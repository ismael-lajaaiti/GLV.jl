var documenterSearchIndex = {"docs":
[{"location":"","page":"Welcome","title":"Welcome","text":"CurrentModule = GLV","category":"page"},{"location":"#Generalized-Lotka-Volterra-Model-in-Julia","page":"Welcome","title":"Generalized Lotka-Volterra Model in Julia","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"Welcome to the documentation for GLV.jl.","category":"page"},{"location":"#Installation","page":"Welcome","title":"Installation","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"The package can be installed with","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"using Pkg; Pkg.add(\"GLV\")","category":"page"},{"location":"#Docstrings","page":"Welcome","title":"Docstrings","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"Modules = [GLV]","category":"page"},{"location":"#GLV.Community","page":"Welcome","title":"GLV.Community","text":"Community(A, r, K)\n\nCreate a community with interaction matrix A,  growth rates r, and carrying capacities K.\n\nExample\n\nA = [-1 0; 0 -1]\nr = [1, 1]\nK = [1, 1]\ncommunity = Community(A, r, K)\n\nSee also solve, simulate_pulse.\n\n\n\n\n\n","category":"type"},{"location":"#Base.rand-Tuple{Type{Community}, Int64}","page":"Welcome","title":"Base.rand","text":"Base.rand(\n::Type{Community},\nS::Int;\nA_ij::Distribution=Normal(0, 1),\nr_i::Union{Nothing,Distribution}=nothing,\nK_i::Union{Nothing,Distribution}=nothing,\n\n)\n\nGenereate a random community with S species. Parameters are drawn from specified distributions. By default, species growth rates and carrying capacities are set to one. Species self-regulation, that is the diagonal of A, is set to -1.\n\nExample\n\nusing Distributions\nc = rand(Community, 10; A_ij=Normal(-1, 0.1))\n\nSee also Community.\n\n\n\n\n\n","category":"method"},{"location":"#GLV.abundance-Tuple{Community}","page":"Welcome","title":"GLV.abundance","text":"abundance(c::Community)\n\nCompute the equilibrium abundance of species in community c. Assumes that A is invertible.\n\nExample\n\nThe equilibrium abundance of two non-interacting species is equal to their carrying capacities.\n\nA = [-1 0; 0 -1]\nr = [1, 1]\nK = [1, 2]\nc = Community(A, r, K)\nabundance(c) == K\n\nSee also relative_yield\n\n\n\n\n\n","category":"method"},{"location":"#GLV.cavity_parameters-Tuple{Community}","page":"Welcome","title":"GLV.cavity_parameters","text":"cavity_parameters(c::Community)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#GLV.cavity_predictions-Tuple{Community}","page":"Welcome","title":"GLV.cavity_predictions","text":"cavity_predictions(c::Community)\n\nTBW\n\nExample\n\n\nusing Distributions\n\nS = 100\nμ, σ = -3, 1\nc = rand(Community, S; A_ij=Normal(μ / S, σ / sqrt(S)))\ncavity_predictions(c)\n\nN0, tspan = fill(1, S), (0, 1_000)\nu = GLV.solve(c, N0, tspan)\nu_end = u[end]\nmean(u[end] .> 0)\nmean(u_end[u_end .> 0])\n\n\n\n\n\n\n","category":"method"},{"location":"#GLV.core_interactions-Tuple{Community}","page":"Welcome","title":"GLV.core_interactions","text":"core_interactions(c::Community)\n\nCompute the 'core' interactions of the community. Core interactions are the species interactions rescaled in a relevant manner to study species coexistence. Formally, the core interactions write\n\nb_ij = a_ij K_i  K_j\n\nwhere a_ij is the interaction from species j to species i.\n\nFor more information refer to Barbier and Arnoldi 2017.\n\n\n\n\n\n","category":"method"},{"location":"#GLV.offdiag-Tuple{Any}","page":"Welcome","title":"GLV.offdiag","text":"offdiag(A)\n\nDictionnary of off-diagonal elements of a matrix A. Keys are pairs of indices (i, j) and values are the corresponding elements of A.\n\nA = [1 2; 3 4]\noffdiag(A)\n\n\n\n\n\n","category":"method"},{"location":"#GLV.relative_yield-Tuple{Community}","page":"Welcome","title":"GLV.relative_yield","text":"relative_yield(c::Community)\n\nCompute the equilibrium relative yield of species in community c. Relative yield is the ratio of abundance to carrying capacity. Assumes that A is invertible.\n\nExample\n\nThe equilibrium relative yields of two non-interacting species are equal to the one.\n\nA = [-1 0; 0 -1]\nr = [1, 1]\nK = [1, 2]\nc = Community(A, r, K)\nrelative_yield(c) == [1, 1]\n\nSee also abundance.\n\n\n\n\n\n","category":"method"},{"location":"#GLV.richness-Tuple{Community}","page":"Welcome","title":"GLV.richness","text":"richness(c::Community)\n\nSpecies richness of the community c.\n\n\n\n\n\n","category":"method"},{"location":"#GLV.simulate_extinctions-Tuple{Community, Any, Any}","page":"Welcome","title":"GLV.simulate_extinctions","text":"simulate_extinctions(c::Community, idx, tspan)\n\nSimulate the dynamics of the community c after the extinction of the species of indices idx for the time span tspan.\n\nExample\n\nusing Distributions\nc = rand(Community, 5; A_ij=Normal(0, 0.1))\nsimulate_extinctions(c, [1, 3], (0, 100)) # Species 1 and 3 go extinct.\n\nSee also solve, simulate_pulse.\n\n\n\n\n\n","category":"method"},{"location":"#GLV.simulate_noise-Tuple{Community, Function, Any}","page":"Welcome","title":"GLV.simulate_noise","text":"simulate_noise(c::Community, noise!::Function, tspan)\n\nSimulate the dynamics of the community c with stochastic noise, around its equilibrium. The species equilibrium abundances are given by abundance.\n\nSee also solve, simulate_pulse, simulate_extinctions, simulate_press.\n\n\n\n\n\n","category":"method"},{"location":"#GLV.simulate_press-Tuple{Community, Any, Any}","page":"Welcome","title":"GLV.simulate_press","text":"simulate_press(c::Community, K_new, tspan)\n\nSimulate the dynamics of the community c following a press perturbation The press perturbation is modeled by a change in the carrying capacities. The species carrying capacities after the perturbation are given by K_new.\n\nExample\n\nusing Distributions\nc = rand(Community, 5; A_ij=Normal(0, 0.1))\nK_new = c.K .- [0.9, 0, 0, 0, 0] # Lower the carrying capacity of the first species.\nsimulate_press(c, K_new, (0, 100))\n\nSee also solve, simulate_pulse, simulate_extinctions.\n\n\n\n\n\n","category":"method"},{"location":"#GLV.simulate_pulse-Tuple{Community, Any, Any}","page":"Welcome","title":"GLV.simulate_pulse","text":"simulate_pulse(c::Community, x, tspan)\n\nSimulate the recovery of the community c after the pulse perturbation x for the time span tspan. In other words, it simulate the community dynamics of initial conditions N^* + x where N^* is the vector of species equilibrium abundances.\n\nExample\n\nusing Distributions\nS = 5 # Number of species.\nc = rand(Community, S; A_ij=Normal(0, 0.1))\nx = rand(Normal(-2, 0.1), S)\nu = simulate_pulse(c, x, (0, 100))\n\nSee also solve.\n\n\n\n\n\n","category":"method"},{"location":"#GLV.solve-Tuple{Community, Any, Any, Function}","page":"Welcome","title":"GLV.solve","text":"solve(c::Community, u0, tspan, noise!::Function; kwargs...)\n\nRun solve with stochastic noise, given by the function noise. The noise! function should be defined as in-place, that is, it should modify the du array in place. For details, see the DifferentialEquations.jl documentation.\n\nExample\n\nusing Distributions\nc = rand(Community, 3; A_ij=Normal(0, 0.1))\nfunction white_noise!(du, u, p, t)\n    for i in eachindex(du)\n        du[i] = 0.1 # Noise intensity.\n    end\nend\nu0, tspan = [1.0, 1.0, 1.0], (0, 1_000)\nsolve(c, u0, tspan, white_noise!)\n\n\n\n\n\n","category":"method"},{"location":"#GLV.solve-Tuple{Community, Any, Any}","page":"Welcome","title":"GLV.solve","text":"DifferentialEquations.solve(c::Community, u0, tspan; kwargs...)\n\nRun the GLV model for community c with initial conditions u0 and time span tspan. The GLV model writes\n\nfracmathrmd N_imathrmdt = r_i N_i left(fracsum_jneq i A_ij N_j - N_iK_iright)\n\nwhere r is the growth rate, A is the interaction matrix, and K is the carrying capacity.\n\nExample\n\nTwo non-interacting species with different carrying capacities.\n\nA = [-1 0; 0 -1] # Only self-interactions.\nr = [1.0, 1.0]\nK = [1.0, 2.0]\nc = Community(A, r, K)\nu0, tspan = [1.0, 1.0], (0, 10_000) # Simulation parameters.\nsol = solve(c, u0, tspan) # Simulate the dynamics.\n\nSee also Community.\n\n\n\n\n\n","category":"method"},{"location":"#GLV.species_reactivity-Tuple{Community}","page":"Welcome","title":"GLV.species_reactivity","text":"species_reactivity(c::Community)\n\nCompute the species reactivity for each species in the community c. Species reactivity correspond to the worst initial response (given by the slope) to a pulse perturbation. Formally, it writes\n\nR_0^(i) = sqrtsum_jneq i a_ij^2 eta_j^2\n\nwhere a_ij is the interaction from species j to species i and eta is the relative yield.\n\nExample\n\nusing Distributions\nS = 50\nμ, σ = -1, 0.2\nc = rand(Community, S; A_ij=Normal(μ / S, σ / sqrt(S)), K_i=Uniform(1, 10), interaction=:core)\nr0 = species_reactivity(c)\ncor(abundance(c), r0) # Weak negative correlation.\ncor(relative_yield(c), r0) # Strong negative correlation.\n\nFor more information refer to Lajaaiti et al. 2024. #TODO: Update reference when the article is in press.\n\n\n\n\n\n","category":"method"}]
}
